@model PresentationLayer.ViewModel.ChatViewModel

@{
    ViewData["Title"] = "Chat";
}

<div class="chat-room-container" data-current-user-id="@Model.CurrentUserId">
    <div id="messages-container">
        <!-- Messages will be loaded by JavaScript -->
    </div>

    <form id="messageForm">
        <input type="hidden" name="senderId" value="@Model.CurrentUserId" />
        <input type="hidden" name="receiverId" value="@Model.ChatPartnerId" />
        <textarea name="message" placeholder="Type a message..." required></textarea>
        <button type="submit">Send</button>
    </form>

    <h2>Chat with @Model.ChatPartnerName</h2>
</div>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#messageForm').submit(function (e) {
                e.preventDefault();
                var messageData = {
                    senderId: '@Model.CurrentUserId',
                    receiverId: '@Model.ChatPartnerId',
                    message: $('textarea[name="message"]').val()
                };
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SendMessage", "Chat")',
                    data: messageData,
                    success: function (response) {
                        fetchMessages(); // Refresh the message list after sending a message
                        $('textarea[name="message"]').val(''); // Clear the text area
                    }
                });
            });

            function createMessageElement(message, isOutgoing) {
                var messageClass = isOutgoing ? 'outgoing' : 'incoming';
                var readStatusText = isOutgoing ? (message.read ? " - Read" : " - Unread") : ""; // Adjusting read status text

                var messageElement = $('<div>').addClass(`message ${messageClass}`);
                var messageContent = $('<div>').addClass('message-content').text(message.message);

                var readStatus = $('<span>').addClass('read-status').text(readStatusText);

                if (isOutgoing) {
                    messageContent.prepend($('<strong>').text('You: '));
                } else {
                    messageContent.prepend($('<strong>').text('@Model.ChatPartnerName: '));
                }

                messageContent.append(readStatus); // Append read status to the message content
                messageElement.append(messageContent);
                messageElement.attr('data-message-id', message.id);
                return messageElement;
            }

            function markMessageAsRead(messageIds) {
                var currentUserId = $('.chat-room-container').data('current-user-id');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("MarkMessagesAsRead", "Chat")',
                    data: { messageIds: messageIds, currentUserId: currentUserId }, // Send as form data
                    success: function (response) {
                        console.log('Message marked as read', response);
                    },
                    error: function (error) {
                        console.error('Error marking message as read', error);
                    }
                });
            }

            function fetchMessages() {
                $.ajax({
                    url: '@Url.Action("RetrieveMessages", "Chat")',
                    data: { userId: '@Model.CurrentUserId', chatPartnerId: '@Model.ChatPartnerId' },
                    success: function (messages) {
                        // Sort the messages by created_at timestamp
                        messages.sort(function (a, b) {
                            return new Date(a.created_at) - new Date(b.created_at);
                        });

                        var messageContainer = $('#messages-container');
                        messageContainer.empty();
                        var messageIds = [];
                        messages.forEach(function (message) {
                            var isOutgoing = message.sender_id === @Model.CurrentUserId;
                            var messageElement = createMessageElement(message, isOutgoing);
                            messageContainer.append(messageElement);

                            if (!isOutgoing) { // Assuming you only mark incoming messages as read
                                messageIds.push(message.id);
                            }
                        });
                        if (messageIds.length > 0) {
                            markMessageAsRead(messageIds);
                        }
                        checkAndMarkMessagesAsRead();
                    }
                });
            }

            function isElementInView(element) {
                var elementTop = $(element).offset().top;
                var elementBottom = elementTop + $(element).outerHeight();

                var viewportTop = $(window).scrollTop();
                var viewportBottom = viewportTop + $(window).height();

                return elementBottom > viewportTop && elementTop < viewportBottom;
            }

            var windowFocused = true;

            $(window).on('focus', function () {
                windowFocused = true;
            });

            $(window).on('blur', function () {
                windowFocused = false;
            });

            function checkAndMarkMessagesAsRead() {
                $('.message.incoming:not(.read)').each(function () {
                    if (isElementInView(this) && windowFocused) {
                        var messageId = $(this).data('messageId'); // Ensure each message element has a data-message-id attribute
                        markMessageAsRead(messageId);
                        $(this).addClass('read'); // Mark the message as read visually and to avoid re-checking it
                    }
                });
            }

            fetchMessages(); // Initial fetch of messages
            setInterval(fetchMessages, 3000); // Refresh messages every 3 seconds
        });
    </script>
}
<style>
    .chat-room-container {
        /* Your existing styles */
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100vh;
        background-color: #fff;
        padding: 10px;
        border: 1px solid #ccc;
    }

    #messages-container {
        /* Your existing styles */
        flex-grow: 1;
        overflow-y: auto;
        padding: 5px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }

    .message {
        /* Your existing styles */
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        background-color: #f1f1f1;
    }

    .outgoing {
        /* Your existing styles for outgoing messages */
        background-color: #DCF8C6; /* Light green background for visual differentiation */
        align-self: flex-end;
    }

    .incoming {
        /* Your existing styles for incoming messages */
        background-color: #ECECEC; /* Light grey background */
        align-self: flex-start;
    }

    .message-content {
        /* Your existing styles */
        margin-bottom: 5px;
    }

    .read-status {
        margin-left: 10px;
        font-weight: bold;
    }

    /* Optionally, add specific colors for read and unread statuses */
    .message.outgoing .read-status {
        color: #4CAF50; /* Green for "Read" messages */
    }

        .message.outgoing .read-status:contains('Unread') {
            color: #FF5722; /* Red or another color for "Unread" messages for better visibility */
        }
</style>
</style>