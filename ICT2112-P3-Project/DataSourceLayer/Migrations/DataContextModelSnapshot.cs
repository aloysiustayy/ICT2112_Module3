// <auto-generated />
using System;
using DataSourceLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataSourceLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("DomainLayer.Entity.Administrator", b =>
                {
                    b.Property<long>("AdministratorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("administratorId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fullName");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nationality");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NRIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PreferredNotificationPlatform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("preferredNotificationPlatform");

                    b.HasKey("AdministratorId");

                    b.HasIndex(new[] { "Nric" }, "IX_Administrator_NRIC")
                        .IsUnique();

                    b.HasIndex(new[] { "AdministratorId" }, "IX_Administrator_administratorId")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Administrator_emailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "Identifier" }, "IX_Administrator_identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Administrator_phoneNumber")
                        .IsUnique();

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Audit", b =>
                {
                    b.Property<long>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("actionId");

                    b.Property<long>("ActionBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("actionBy");

                    b.Property<string>("ActionPerformed")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("actionPerformed");

                    b.Property<string>("ActionTimestamp")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("actionTimestamp");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("actionType");

                    b.HasKey("ActionId");

                    b.HasIndex("ActionBy");

                    b.ToTable("Audit", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Chatbot", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("chatId");

                    b.Property<string>("GptapikeyId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("GPTAPIKeyId");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("prompt");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("response");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.Property<long>("ToggleGpt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("toggleGPT");

                    b.Property<string>("Userinput")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("userinput");

                    b.HasKey("ChatId");

                    b.ToTable("Chatbot", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.ConsumedDateTime", b =>
                {
                    b.Property<long>("MedicationTrackerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("medicationTrackerId");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateTime");

                    b.HasKey("MedicationTrackerId", "DateTime");

                    b.ToTable("ConsumedDateTime");
                });

            modelBuilder.Entity("DomainLayer.Entity.DischargeRecord", b =>
                {
                    b.Property<long>("DischargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("dischargeId");

                    b.Property<string>("DischargeDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("dischargeDate");

                    b.Property<string>("DischargeSummary")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("dischargeSummary");

                    b.Property<long>("DocumentationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("documentationId");

                    b.Property<long>("FollowUpAppointmentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("followUpAppointmentId");

                    b.Property<long>("InPatientId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MedicalPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("medicalPlanId");

                    b.HasKey("DischargeId");

                    b.HasIndex("DocumentationId");

                    b.HasIndex("FollowUpAppointmentId");

                    b.HasIndex("InPatientId");

                    b.HasIndex("MedicalPlanId");

                    b.ToTable("Discharge Records", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Doctor", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("doctorId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fullName");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nationality");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NRIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PreferredNotificationPlatform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("preferredNotificationPlatform");

                    b.HasKey("DoctorId");

                    b.HasIndex(new[] { "Nric" }, "IX_Doctor_NRIC")
                        .IsUnique();

                    b.HasIndex(new[] { "DoctorId" }, "IX_Doctor_doctorId")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Doctor_emailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "Identifier" }, "IX_Doctor_identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Doctor_phoneNumber")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Documentation", b =>
                {
                    b.Property<long>("DocumentationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("documentationId");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<long>("SafetyChecklist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("safetyChecklist");

                    b.HasKey("DocumentationId");

                    b.ToTable("Documentation", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Drug", b =>
                {
                    b.Property<long>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("drugId");

                    b.Property<string>("DrugInformation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("drugInformation");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("drugName");

                    b.Property<long>("Inventory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("inventory");

                    b.HasKey("DrugId");

                    b.ToTable("Drugs", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.DrugRecord", b =>
                {
                    b.Property<long>("DrugRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrugDescription")
                        .HasColumnType("TEXT")
                        .HasColumnName("drugRecordDesc");

                    b.Property<long>("DrugID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PatientID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.HasKey("DrugRecordID");

                    b.ToTable("DrugRecords", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.DrugRecordDrug", b =>
                {
                    b.Property<long>("DrugRecordDrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DrugId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrugRecordDescription")
                        .HasColumnType("TEXT");

                    b.Property<long>("DrugRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DrugRecordDrugID");

                    b.HasIndex("DrugId");

                    b.HasIndex("DrugRecordID");

                    b.ToTable("DrugRecordDrugs", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.FollowUpAppointmentRecord", b =>
                {
                    b.Property<long>("FollowUpAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("followUpAppointmentId");

                    b.Property<string>("FollowUpAppointmentDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("followUpAppointmentDate");

                    b.HasKey("FollowUpAppointmentId");

                    b.ToTable("FollowUp Appointment Records", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.InPatientHistory", b =>
                {
                    b.Property<long>("InPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("inPatientId");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<long>("StayDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stayDuration");

                    b.Property<string>("StayEndDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("stayEndDate");

                    b.Property<string>("StayStartDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("stayStartDate");

                    b.HasKey("InPatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("In-Patient History", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.MedicationCounselling", b =>
                {
                    b.Property<long>("MedicationCounsellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("medicationCounsellingId");

                    b.Property<byte[]>("MedicationCounsellingChoice")
                        .IsRequired()
                        .HasColumnType("NUMERIC")
                        .HasColumnName("medicationCounsellingChoice");

                    b.Property<string>("MedicationCounsellingDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("medicationCounsellingDescription");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.HasKey("MedicationCounsellingId");

                    b.HasIndex("PatientId");

                    b.ToTable("Medication Counselling", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.MedicationTracker", b =>
                {
                    b.Property<long>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("trackingId");

                    b.Property<bool>("BeforeMeals")
                        .HasColumnType("INTEGER")
                        .HasColumnName("beforeMeals");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("day");

                    b.Property<long?>("DrugId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HasNotified")
                        .HasColumnType("TEXT")
                        .HasColumnName("hasNotified");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("INTEGER")
                        .HasColumnName("timesPerDay");

                    b.HasKey("TrackingId");

                    b.HasIndex("DrugId");

                    b.ToTable("Medication Tracker", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("messageId");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chatId");

                    b.Property<string>("Dialog")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("dialog");

                    b.Property<long>("SenderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("senderId");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DomainLayer.Entity.NotificationLog", b =>
                {
                    b.Property<long>("NotifcationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("notifcationId");

                    b.Property<string>("AdministratorEmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("administratorEmailAddress");

                    b.Property<string>("AdministratorPreferredNotification")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("administratorPreferredNotification");

                    b.Property<string>("NotifcationDateTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notifcationDateTime");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notificationContent");

                    b.Property<string>("NotificationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notificationStatus");

                    b.Property<string>("NotificationTopic")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notificationTopic");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("notificationType");

                    b.HasKey("NotifcationId");

                    b.HasIndex("AdministratorEmailAddress");

                    b.ToTable("Notification Log", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Nurse", b =>
                {
                    b.Property<long>("NurseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nurseId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fullName");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nationality");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NRIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PreferredNotificationPlatform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("preferredNotificationPlatform");

                    b.HasKey("NurseId");

                    b.HasIndex(new[] { "Nric" }, "IX_Nurse_NRIC")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Nurse_emailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "Identifier" }, "IX_Nurse_identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "NurseId" }, "IX_Nurse_nurseId")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Nurse_phoneNumber")
                        .IsUnique();

                    b.ToTable("Nurse", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Patient", b =>
                {
                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fullName");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nationality");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NRIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PreferredNotificationPlatform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("preferredNotificationPlatform");

                    b.HasKey("PatientId");

                    b.HasIndex(new[] { "Nric" }, "IX_Patient_NRIC")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Patient_emailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "Identifier" }, "IX_Patient_identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "PatientId" }, "IX_Patient_patientId")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Patient_phoneNumber")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientCaregiver", b =>
                {
                    b.Property<long>("PatientCaregiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientCaregiverId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fullName");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nationality");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NRIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("PreferredNotificationPlatform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("preferredNotificationPlatform");

                    b.HasKey("PatientCaregiverId");

                    b.HasIndex(new[] { "Nric" }, "IX_Patient Caregiver_NRIC")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddress" }, "IX_Patient Caregiver_emailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "Identifier" }, "IX_Patient Caregiver_identifier")
                        .IsUnique();

                    b.HasIndex(new[] { "PatientCaregiverId" }, "IX_Patient Caregiver_patientCaregiverId")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Patient Caregiver_phoneNumber")
                        .IsUnique();

                    b.ToTable("Patient Caregiver", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientCaregiverAssignment", b =>
                {
                    b.Property<long>("PatientCaregiverAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientCaregiverAssignmentId");

                    b.Property<long>("PatientCaregiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientCaregiverId");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<string>("TimeAssigned")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("timeAssigned");

                    b.HasKey("PatientCaregiverAssignmentId");

                    b.HasIndex("PatientCaregiverId");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient Caregiver Assignment", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientMedicalPlan", b =>
                {
                    b.Property<long>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("planId");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accountId");

                    b.Property<long>("AssignedByNurseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignedByNurseId");

                    b.Property<long?>("DrugId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<DateTime>("PlanEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("planEnd");

                    b.Property<string>("PlanNotes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("planNotes");

                    b.Property<DateTime>("PlanStart")
                        .HasColumnType("TEXT")
                        .HasColumnName("planStart");

                    b.Property<bool>("TrackPlan")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trackPlan");

                    b.HasKey("PlanId");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient Medical Plan", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientMedicalRecord", b =>
                {
                    b.Property<long>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("medicalRecordId");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("allergies");

                    b.Property<string>("DiagnosisCurrent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("diagnosisCurrent");

                    b.Property<string>("DiagnosisPast")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("diagnosisPast");

                    b.Property<byte[]>("Erratum")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("erratum");

                    b.Property<string>("HealthImprovementProgress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("healthImprovementProgress");

                    b.Property<string>("IllnessName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("illnessName");

                    b.Property<string>("ImmunizationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("immunizationStatus");

                    b.Property<string>("MedicationCurrent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("medicationCurrent");

                    b.Property<string>("MedicationPast")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("medicationPast");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient Medical Record", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Photo", b =>
                {
                    b.Property<long>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("photoId");

                    b.Property<byte[]>("PhotoImage")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("photoImage");

                    b.HasKey("PhotoId");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeService", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("serviceId");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("serviceDescription");

                    b.Property<long>("ServiceDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("serviceDuration");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("serviceName");

                    b.HasKey("ServiceId");

                    b.ToTable("Pre-discharge Service", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceAssignment", b =>
                {
                    b.Property<long>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignmentId");

                    b.Property<string>("AppointmentDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("appointmentDate");

                    b.Property<string>("AssignmentDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("assignmentDate");

                    b.Property<long>("DoctorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("doctorId");

                    b.Property<long>("NurseId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nurseId");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<long>("ServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("serviceId");

                    b.HasKey("AssignmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Pre-discharge Service Assignment", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceLog", b =>
                {
                    b.Property<long>("ServiceLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("serviceLogId");

                    b.Property<string>("PostAppointmentNotes")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("postAppointmentNotes");

                    b.Property<string>("PostAppointmentObservation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("postAppointmentObservation");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scheduleId");

                    b.HasKey("ServiceLogId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Pre-discharge Service Logs", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceSchedule", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("scheduleId");

                    b.Property<string>("AppointmentDateTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("appointmentDateTime");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assignmentId");

                    b.Property<string>("AssignmentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("assignmentStatus");

                    b.HasKey("ScheduleId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Pre-discharge Service Schedule", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.Prescription", b =>
                {
                    b.Property<long>("DrugId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MedicationTrackerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PatientMedicalPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DrugId", "MedicationTrackerId", "PatientMedicalPlanId");

                    b.HasIndex("MedicationTrackerId");

                    b.HasIndex("PatientMedicalPlanId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("DomainLayer.Entity.RescheduleRequest", b =>
                {
                    b.Property<long>("ResceduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("resceduleId");

                    b.Property<string>("AppointmentDateTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("appointmentDateTime");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<long>("RequestStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("requestStatus");

                    b.Property<string>("RescheduleReason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("rescheduleReason");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("scheduleId");

                    b.HasKey("ResceduleId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Reschedule Request", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.SafetyChecklist", b =>
                {
                    b.Property<long>("SafetyChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("safetyChecklistId");

                    b.Property<string>("LocationCategory")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("locationCategory");

                    b.Property<long>("PhotoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("photoId");

                    b.Property<string>("RiskComment")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("riskComment");

                    b.Property<string>("RiskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("riskDescription");

                    b.Property<string>("RiskTitle")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("riskTitle");

                    b.HasKey("SafetyChecklistId");

                    b.ToTable("Safety Checklist", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entity.SafetyChecklistAssessment", b =>
                {
                    b.Property<long>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("assessmentId");

                    b.Property<long>("PatientCaregiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientCaregiverId");

                    b.Property<byte[]>("PatientHomeEnvPhotos")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("patientHomeEnvPhotos");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("patientId");

                    b.Property<string>("RiskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("riskDescription");

                    b.Property<string>("RiskRating")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("riskRating");

                    b.HasKey("AssessmentId");

                    b.HasIndex("PatientCaregiverId");

                    b.HasIndex("PatientId");

                    b.ToTable("Safety Checklist Assessment", (string)null);
                });

            modelBuilder.Entity("DrugDrugRecord", b =>
                {
                    b.Property<long>("DrugRecordsDrugRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DrugsDrugId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DrugRecordsDrugRecordID", "DrugsDrugId");

                    b.HasIndex("DrugsDrugId");

                    b.ToTable("DrugDrugRecord");
                });

            modelBuilder.Entity("DomainLayer.Entity.Audit", b =>
                {
                    b.HasOne("DomainLayer.Entity.Administrator", "ActionByNavigation")
                        .WithMany("Audits")
                        .HasForeignKey("ActionBy")
                        .IsRequired();

                    b.Navigation("ActionByNavigation");
                });

            modelBuilder.Entity("DomainLayer.Entity.ConsumedDateTime", b =>
                {
                    b.HasOne("DomainLayer.Entity.MedicationTracker", "MedicationTracker")
                        .WithMany("ConsumedOn")
                        .HasForeignKey("MedicationTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationTracker");
                });

            modelBuilder.Entity("DomainLayer.Entity.DischargeRecord", b =>
                {
                    b.HasOne("DomainLayer.Entity.Documentation", "Documentation")
                        .WithMany("DischargeRecords")
                        .HasForeignKey("DocumentationId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.FollowUpAppointmentRecord", "FollowUpAppointment")
                        .WithMany("DischargeRecords")
                        .HasForeignKey("FollowUpAppointmentId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.InPatientHistory", "InPatient")
                        .WithMany("DischargeRecords")
                        .HasForeignKey("InPatientId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.PatientMedicalPlan", "MedicalPlan")
                        .WithMany("DischargeRecords")
                        .HasForeignKey("MedicalPlanId")
                        .IsRequired();

                    b.Navigation("Documentation");

                    b.Navigation("FollowUpAppointment");

                    b.Navigation("InPatient");

                    b.Navigation("MedicalPlan");
                });

            modelBuilder.Entity("DomainLayer.Entity.DrugRecordDrug", b =>
                {
                    b.HasOne("DomainLayer.Entity.Drug", "Drug")
                        .WithMany("DrugRecordDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.DrugRecord", "DrugRecord")
                        .WithMany("DrugRecordDrugs")
                        .HasForeignKey("DrugRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("DrugRecord");
                });

            modelBuilder.Entity("DomainLayer.Entity.InPatientHistory", b =>
                {
                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("InPatientHistories")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DomainLayer.Entity.MedicationCounselling", b =>
                {
                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("MedicationCounsellings")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DomainLayer.Entity.MedicationTracker", b =>
                {
                    b.HasOne("DomainLayer.Entity.Drug", null)
                        .WithMany("MedicationTracker")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("DomainLayer.Entity.NotificationLog", b =>
                {
                    b.HasOne("DomainLayer.Entity.Administrator", "AdministratorEmailAddressNavigation")
                        .WithMany("NotificationLogs")
                        .HasForeignKey("AdministratorEmailAddress")
                        .HasPrincipalKey("EmailAddress")
                        .IsRequired();

                    b.Navigation("AdministratorEmailAddressNavigation");
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientCaregiverAssignment", b =>
                {
                    b.HasOne("DomainLayer.Entity.PatientCaregiver", "PatientCaregiver")
                        .WithMany("PatientCaregiverAssignments")
                        .HasForeignKey("PatientCaregiverId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("PatientCaregiverAssignments")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PatientCaregiver");
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientMedicalPlan", b =>
                {
                    b.HasOne("DomainLayer.Entity.Drug", null)
                        .WithMany("PatientMedicalPlans")
                        .HasForeignKey("DrugId");

                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("PatientMedicalPlans")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientMedicalRecord", b =>
                {
                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("PatientMedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceAssignment", b =>
                {
                    b.HasOne("DomainLayer.Entity.Doctor", "Doctor")
                        .WithMany("PreDischargeServiceAssignments")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.Nurse", "Nurse")
                        .WithMany("PreDischargeServiceAssignmentNurses")
                        .HasForeignKey("NurseId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.Nurse", "Patient")
                        .WithMany("PreDischargeServiceAssignmentPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.PreDischargeService", "Service")
                        .WithMany("PreDischargeServiceAssignments")
                        .HasForeignKey("ServiceId")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceLog", b =>
                {
                    b.HasOne("DomainLayer.Entity.PreDischargeServiceSchedule", "Schedule")
                        .WithMany("PreDischargeServiceLogs")
                        .HasForeignKey("ScheduleId")
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceSchedule", b =>
                {
                    b.HasOne("DomainLayer.Entity.PreDischargeServiceAssignment", "Assignment")
                        .WithMany("PreDischargeServiceSchedules")
                        .HasForeignKey("AssignmentId")
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("DomainLayer.Entity.Prescription", b =>
                {
                    b.HasOne("DomainLayer.Entity.Drug", "Drug")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.MedicationTracker", "MedicationTracker")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicationTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.PatientMedicalPlan", "PatientMedicalPlan")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientMedicalPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("MedicationTracker");

                    b.Navigation("PatientMedicalPlan");
                });

            modelBuilder.Entity("DomainLayer.Entity.RescheduleRequest", b =>
                {
                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("RescheduleRequests")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.PreDischargeServiceSchedule", "Schedule")
                        .WithMany("RescheduleRequests")
                        .HasForeignKey("ScheduleId")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DomainLayer.Entity.SafetyChecklistAssessment", b =>
                {
                    b.HasOne("DomainLayer.Entity.PatientCaregiver", "PatientCaregiver")
                        .WithMany("SafetyChecklistAssessments")
                        .HasForeignKey("PatientCaregiverId")
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.Patient", "Patient")
                        .WithMany("SafetyChecklistAssessments")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PatientCaregiver");
                });

            modelBuilder.Entity("DrugDrugRecord", b =>
                {
                    b.HasOne("DomainLayer.Entity.DrugRecord", null)
                        .WithMany()
                        .HasForeignKey("DrugRecordsDrugRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entity.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugsDrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Entity.Administrator", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("NotificationLogs");
                });

            modelBuilder.Entity("DomainLayer.Entity.Doctor", b =>
                {
                    b.Navigation("PreDischargeServiceAssignments");
                });

            modelBuilder.Entity("DomainLayer.Entity.Documentation", b =>
                {
                    b.Navigation("DischargeRecords");
                });

            modelBuilder.Entity("DomainLayer.Entity.Drug", b =>
                {
                    b.Navigation("DrugRecordDrugs");

                    b.Navigation("MedicationTracker");

                    b.Navigation("PatientMedicalPlans");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DomainLayer.Entity.DrugRecord", b =>
                {
                    b.Navigation("DrugRecordDrugs");
                });

            modelBuilder.Entity("DomainLayer.Entity.FollowUpAppointmentRecord", b =>
                {
                    b.Navigation("DischargeRecords");
                });

            modelBuilder.Entity("DomainLayer.Entity.InPatientHistory", b =>
                {
                    b.Navigation("DischargeRecords");
                });

            modelBuilder.Entity("DomainLayer.Entity.MedicationTracker", b =>
                {
                    b.Navigation("ConsumedOn");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DomainLayer.Entity.Nurse", b =>
                {
                    b.Navigation("PreDischargeServiceAssignmentNurses");

                    b.Navigation("PreDischargeServiceAssignmentPatients");
                });

            modelBuilder.Entity("DomainLayer.Entity.Patient", b =>
                {
                    b.Navigation("InPatientHistories");

                    b.Navigation("MedicationCounsellings");

                    b.Navigation("PatientCaregiverAssignments");

                    b.Navigation("PatientMedicalPlans");

                    b.Navigation("PatientMedicalRecords");

                    b.Navigation("RescheduleRequests");

                    b.Navigation("SafetyChecklistAssessments");
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientCaregiver", b =>
                {
                    b.Navigation("PatientCaregiverAssignments");

                    b.Navigation("SafetyChecklistAssessments");
                });

            modelBuilder.Entity("DomainLayer.Entity.PatientMedicalPlan", b =>
                {
                    b.Navigation("DischargeRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeService", b =>
                {
                    b.Navigation("PreDischargeServiceAssignments");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceAssignment", b =>
                {
                    b.Navigation("PreDischargeServiceSchedules");
                });

            modelBuilder.Entity("DomainLayer.Entity.PreDischargeServiceSchedule", b =>
                {
                    b.Navigation("PreDischargeServiceLogs");

                    b.Navigation("RescheduleRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
